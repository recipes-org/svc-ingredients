{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Ingredients service</p> <ul> <li>DB: Database schema and considerations.</li> </ul>"},{"location":"db/","title":"Db","text":""},{"location":"repository/","title":"Repository","text":""},{"location":"repository/#ingredients.repository.Repository","title":"<code>Repository</code>","text":"<p>             Bases: <code>Protocol</code></p> <p>Ingredient repository protocol.</p> Source code in <code>src/ingredients/repository.py</code> <pre><code>class Repository(Protocol):\n\"\"\"Ingredient repository protocol.\"\"\"\n\n    session_factory: async_sessionmaker[AsyncSession] | None\n    session: AsyncSession\n\n    @classmethod\n    async def initialise(cls, cfg: config.Config) -&gt; None: ...\n\n    async def add(self, ingredient: domain.Ingredient) -&gt; domain.IngredientInDB: ...\n\n    async def get(self, ingredient_id: str) -&gt; domain.IngredientInDB: ...\n\n    async def list(self) -&gt; list[domain.IngredientInDB]: ...\n</code></pre>"},{"location":"repository/#ingredients.repository.SQLAlchemyRepository","title":"<code>SQLAlchemyRepository</code>","text":"<p>SQLAlchemy implementation of the ingredient repository protocol.</p> Source code in <code>src/ingredients/repository.py</code> <pre><code>class SQLAlchemyRepository:\n\"\"\"SQLAlchemy implementation of the ingredient repository protocol.\"\"\"\n\n    engine: AsyncEngine | None = None\n    session_factory: async_sessionmaker[AsyncSession] | None = None\n\n    @classmethod\n    async def initialise(cls, cfg: config.Config) -&gt; None:\n        kwargs: dict[str, Any] = {}\n        if \"sqlite\" in cfg.database_url.lower():  # pragma: no cover\n            kwargs = kwargs | {\"check_same_thread\": False}\n        engine = create_async_engine(\n            cfg.database_url,\n            connect_args=kwargs,\n            echo=cfg.debug,\n        )\n\n        cls.engine = engine\n        cls.session_factory = async_sessionmaker(\n            autocommit=False, autoflush=False, bind=engine\n        )\n        if cfg.ingredients_sql_alchemy_database_create:\n            async with cls.engine.begin() as conn:\n                await conn.run_sync(orm.Base.metadata.create_all)\n\n    def __init__(self) -&gt; None:\n        if self.session_factory is None:\n            raise RuntimeError(f\"{self.__class__.__name__} not initialised.\")\n        self.session = self.session_factory()\n\n    async def add(self, ingredient: domain.Ingredient) -&gt; domain.IngredientInDB:\n        ingredient_in_db = domain.IngredientInDB.from_ingredient(ingredient)\n        orm_ingredient = orm.Ingredient.from_domain(ingredient_in_db)\n        self.session.add(orm_ingredient)\n        return ingredient_in_db\n\n    async def get(self, ingredient_id: str) -&gt; domain.IngredientInDB:\n        stmt = select(orm.Ingredient).where(orm.Ingredient.id == ingredient_id)\n        orm_ingredient = await self.session.execute(stmt)\n        return domain.IngredientInDB.model_validate(orm_ingredient.scalar_one())\n\n    async def list(self) -&gt; list[domain.IngredientInDB]:\n        stmt = select(orm.Ingredient)\n        orm_ingredients = (await self.session.execute(stmt)).scalars().all()\n        return [domain.IngredientInDB.model_validate(o) for o in orm_ingredients]\n</code></pre>"}]}